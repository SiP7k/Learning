using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Start
{
    class Test
    {
        public static void Main()
        {
            bool isWorking = true;
            Random rand = new Random();
            List<City> cities = new List<City>();
            cities.Add (new City("Москва"));
            cities.Add(new City("Питер"));
            cities.Add(new City("Казань"));
            cities.Add(new City("Владивосток"));
            Renderer renderer = new Renderer(0,0);
            
            while (isWorking)
            {
                Console.Clear();
                int numberOfCarriages = 0;
                int numberOfPassangers = rand.Next(100, 1000);
                Train train = new Train(new List<Carriage>(), numberOfPassangers, numberOfCarriages, cities[0], cities[0], numberOfPassangers);
                renderer.DrawInfoWindow(train.Location.Name, train.Direction.Name, train.NumberOfPassangersOut, train.NumberOfCarriages);
                Console.WriteLine("Выберите направление:\n1 - Москва\n2 - Питер\n3 - Казань\n4 - Владивосток\n5- Выйти из программы");
                string userInput = Console.ReadLine();
                Console.Clear();
                
                switch (userInput)
                {
                    case "1":
                        train.GoToNextCity(cities,0);
                        break;
                    case "2":
                        train.GoToNextCity(cities,1);
                        break;
                    case "3":
                        train.GoToNextCity(cities,2);
                        break;
                    case "4":
                        train.GoToNextCity(cities,3);
                        break;
                    case "5":
                        isWorking = false;
                        break;
                }
            }
        }
    }
    class Train
    {
        public City Location { get; private set;}
        public City Direction { get; private set; }
        public int NumberOfPassangersOut { get; private set; }
        public int NumberOfCarriages { get; private set; }
        private int _numberOfPassangersIn;
        private List<Carriage> _carriages = new List<Carriage>();

        public Train(List<Carriage> carriages, int numberOfPassangers, int numberOfCarriages, City location, City direction, int numberOfPassangersIn)
        {
            Location = location;
            Direction = direction;
            NumberOfPassangersOut = numberOfPassangers;
            NumberOfCarriages = numberOfCarriages;
            _carriages = carriages;
            _numberOfPassangersIn = numberOfPassangersIn;
        }
        public void Fill()
        {
            NumberOfCarriages = GetNumberCarriages();
            
            for (int i = 0; i < NumberOfCarriages; i++)
            {
                List<Passanger> passangers = new List<Passanger>();
                _carriages.Add(new Carriage(passangers, 50, 20));
                NumberOfPassangersOut = _carriages[i].Fill(NumberOfPassangersOut);
            }
        }
        public int GetNumberCarriages()
        {
            int numberOfCarriages = NumberOfPassangersOut / 50;

            if (NumberOfPassangersOut % 50 != 0)
            {
                numberOfCarriages += 1;
            }
            return numberOfCarriages;
        }
        public bool CreateWay(City city)
        {
            Console.SetCursorPosition(10, 10);
            Direction = city;

            if (Direction == Location)
            {
                Console.WriteLine("Вы уже в этом городе, выберите другой город!\nНажмите любую клавишу для продолжения...");
                Console.ReadKey();
                return false;
            }
            else
            {
                Console.WriteLine($"Создано направление {Location.Name} - {Direction.Name}\nНажмите любую клавишу для продолжения...");
               
                return true;
            }
        }
        public void GoToNextCity(List<City> cities, int numberCity)
        {
            Renderer renderer = new Renderer(0, 0);

            if (CreateWay(cities[numberCity]))
            {
                Fill();
                renderer.DrawInfoWindow(Location.Name, Direction.Name, _numberOfPassangersIn, NumberOfCarriages);
            }
            Console.ReadKey();
        }
    }
    class Carriage
    {
        public int _maxPlace { get; private set; }
        public int _price { get; private set; }
        private List<Passanger> _passangers = new List<Passanger>();
        Random rand = new Random();

        public Carriage(List<Passanger> passangers, int maxPlace, int price)
        {
            _maxPlace = maxPlace;
            _price = price;
            _passangers = passangers;
        }
        public int Fill(int numberOfPassangers)
        {
            if (numberOfPassangers >= _maxPlace)
            {
                for (int i = 0; i < _maxPlace; i++)
                {
                    _passangers.Add(new Passanger(rand.Next(100, 150)));
                    _passangers[i].BuyTicket(_price);
                }
                return numberOfPassangers -= _maxPlace;
            }
            else
            {
                for (int i = 0; i < numberOfPassangers; i++)
                {
                    _passangers.Add(new Passanger(rand.Next(50, 150)));
                    _passangers[i].BuyTicket(_price);
                }
                return numberOfPassangers;
            }
        }
    }
    class City
    {
        public string Name { get; private set; }

        public City(string name)
        {
            Name = name;
        }
    }
    class Passanger
    {
        private int _money;

        public Passanger(int money)
        {
            _money = money;
        }

        public void BuyTicket(int price)
        {
            if (_money >= price)
            {
                _money -= price;
            }
            else
            {
                Console.WriteLine("У пассажира не хватило денег!");
                Console.ReadKey();
            }
        }
    }
    class Renderer
    {
        private int _x;
        private int _y;

        public Renderer(int x, int y)
        {
            _x = x;
            _y = y;
        }
        public void DrawInfoWindow(string location,string direction, int numberOfPassangers, int numberOfCarriages)
        {
            Console.SetCursorPosition(_x,_y);
            Console.WriteLine($"Рейс:           {location} - {direction}\nЧеловек на борту: {numberOfPassangers}\nКоличество вагонов: {numberOfCarriages}");
            Console.SetCursorPosition(10, 10);
        }
    }
}
