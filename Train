using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Start
{
    class Test
    {
        public static void Main()
        {
            bool isWorking = true;
            Random random = new Random();
            Renderer renderer = new Renderer(0,0);
            int minPassangers = 100;
            int maxPassangers = 1000;
            City.Add();
            int indexOfStartCity = 0;

            while (isWorking)
            {
                Console.Clear();
                int numberOfCarriages = 0;
                int numberOfPassangers = random.Next(minPassangers, maxPassangers);
                Train train = new Train(new List<Carriage>(), numberOfPassangers, numberOfCarriages, City.GiveCity(indexOfStartCity), City.GiveCity(indexOfStartCity), numberOfPassangers);
                Direction direction = new Direction(train);
                renderer.DrawInfoWindow(train.Location.Name, train.Direction.Name, train.NumberOfPassangersOut, train.NumberOfCarriages);
                City.PrintCities();
                direction.Choose();  
            }
        }
    }
    class Direction
    {
        private Train _train;
        public Direction(Train train)
        {
            _train = train;
        }
        public void Choose()
        {
            Console.WriteLine("Введите номер следующего города:");
            string userInput = Console.ReadLine();

            if (Int32.TryParse(userInput, out int result) && result > 0 && result <= City.GiveCity(result - 2).GiveCopyOfCities().Length)
            {
                int indexOfCity = result - 1;

                switch (result)
                {
                    case 1:
                        _train.GoToNextCity(City.GiveCity(indexOfCity));
                        break;
                    case 2:
                        _train.GoToNextCity(City.GiveCity(indexOfCity));
                        break;
                    case 3:
                        _train.GoToNextCity(City.GiveCity(indexOfCity));
                        break;
                    case 4:
                        _train.GoToNextCity(City.GiveCity(indexOfCity));
                        break;
                }
            }
            else
            {
                Console.WriteLine("Неправильный ввод данных");
                Console.ReadKey();
            }
        }
    }
    class Train
    {
        private int _numberOfPassangersIn;
        private List<Carriage> _carriages = new List<Carriage>();
        public City Location { get; private set;}
        public City Direction { get; private set; }
        public int NumberOfPassangersOut { get; private set; }
        public int NumberOfCarriages { get; private set; }
        
        public Train(List<Carriage> carriages, int numberOfPassangers, int numberOfCarriages, City location, City direction, int numberOfPassangersIn)
        {
            _carriages = carriages;
            _numberOfPassangersIn = numberOfPassangersIn;
            Location = location;
            Direction = direction;
            NumberOfPassangersOut = numberOfPassangers;
            NumberOfCarriages = numberOfCarriages;
        }
        public void Fill(int maxPlace,int price)
        {
            NumberOfCarriages = GetNumberCarriages(maxPlace);

            for (int i = 0; i < NumberOfCarriages; i++)
            {
                List<Passanger> passangers = new List<Passanger>();
                _carriages.Add(new Carriage(passangers, maxPlace, price));
                NumberOfPassangersOut = _carriages[i].Fill(NumberOfPassangersOut);
            }
        }
        public int GetNumberCarriages(int maxPlace)
        {
            int numberOfCarriages = NumberOfPassangersOut / maxPlace;
            int lastCarriage = 1;

            if (NumberOfPassangersOut % maxPlace != 0)
            {
                numberOfCarriages += lastCarriage;
            }
            return numberOfCarriages;
        }
        public bool CreateWay(City city)
        {
            
            Direction = city;

            if (Direction == Location)
            {
                Console.WriteLine("Вы уже в этом городе, выберите другой город!\nНажмите любую клавишу для продолжения...");
                Console.ReadKey();
                return false;
            }
            else
            {
                Console.WriteLine($"Вы едете из {Location.Name} в {Direction.Name}\nНажмите любую клавишу для продолжения...");
                return true;
            }
        }
        public void GoToNextCity(City city)
        {
            int maxPlace = 50;
            int price = 20;
            Renderer renderer = new Renderer(0, 0);

            if (CreateWay(city))
            {
                Fill(maxPlace, price);
                renderer.DrawInfoWindow(Location.Name, Direction.Name, _numberOfPassangersIn, NumberOfCarriages);
            }
            Console.ReadKey();
        }
    }
    class Carriage
    {
        public int MaxPlace { get; private set; }
        public int Price { get; private set; }
        private List<Passanger> _passangers = new List<Passanger>();
        private Random _random = new Random();

        public Carriage(List<Passanger> passangers, int maxPlace=50, int price=20)
        {
            MaxPlace = maxPlace;
            Price = price;
            _passangers = passangers;
        }
        public int Fill(int numberOfPassangers)
        {
            int minPassangerMoney = 100;
            int maxPassangerMoney = 150;

            if (numberOfPassangers >= MaxPlace)
            {
                for (int i = 0; i < MaxPlace; i++)
                {
                    _passangers.Add(new Passanger(_random.Next(minPassangerMoney, maxPassangerMoney)));
                    _passangers[i].BuyTicket(Price);
                }
                return numberOfPassangers -= MaxPlace;
            }
            else
            {
                for (int i = 0; i < numberOfPassangers; i++)
                {
                    _passangers.Add(new Passanger(_random.Next(minPassangerMoney, maxPassangerMoney)));
                    _passangers[i].BuyTicket(Price);
                }
                return numberOfPassangers;
            }
        }
    }
    class City
    {
        public string Name { get; private set; }
        private static List<City> _cities = new List<City>();
        public City(string name)
        {
            Name = name;
        }
        public static void Add()
        {
            _cities.Add(new City("Москва"));
            _cities.Add(new City("Питер"));
            _cities.Add(new City("Казань"));
            _cities.Add(new City("Владивосток"));
        }    
        public static void PrintCities()
        {
            for (int i = 0; i < _cities.Count; i++)
            {
                Console.WriteLine($"{i + 1}) - {_cities[i].Name}");
            }
        }
        public static City GiveCity(int NumberOfCity)
        {
            return _cities[NumberOfCity];
        }
        public City[] GiveCopyOfCities()
        {
            City[] tempCities = new City[_cities.Count];
            _cities.CopyTo(tempCities);
            return tempCities;
        }
    }
    class Passanger
    {
        private int _money;

        public Passanger(int money)
        {
            _money = money;
        }

        public void BuyTicket(int price)
        {
            if (_money >= price)
            {
                _money -= price;
            }
            else
            {
                Console.WriteLine("У пассажира не хватило денег!");
                Console.ReadKey();
            }
        }
    }
    class Renderer
    {
        private int _infoWindowPositionX;
        private int _infoWindowPositionY;

        public Renderer(int infoWindowPositionX, int infoWindowPositionY)
        {
            _infoWindowPositionX = infoWindowPositionX;
            _infoWindowPositionY = infoWindowPositionY;
        }
        public void DrawInfoWindow(string location,string direction, int numberOfPassangers, int numberOfCarriages)
        {
            Console.SetCursorPosition(_infoWindowPositionX,_infoWindowPositionY);
            Console.WriteLine($"Рейс:           {location} - {direction}\nЧеловек на борту: {numberOfPassangers}\nКоличество вагонов: {numberOfCarriages}");
            Console.SetCursorPosition(0, 10);
        }
    }
}
