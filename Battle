using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Start
{
    class Test
    {
        public static void Main()
        {
            Arena arena = new Arena(new List<Fighter>());
            arena.ChooseFighters();

            while (arena.FirstFighter.IsAlive && arena.SecondFighter.IsAlive)
            {
                arena.GoFight();
            }
        }
    }
    class Arena
    {
        Random random = new Random();
        private List<Fighter> _fighters = new List<Fighter>();
        public Fighter FirstFighter { get; private set; }
        public Fighter SecondFighter { get; private set; }

        public Arena(List<Fighter> fighters)
        {
            _fighters = fighters;
        }
        public void GoFight()
        {
            int damageGap = 5;
            int actualDamageOfSecondFighter = random.Next(SecondFighter.Damage - damageGap, damageGap + SecondFighter.Damage);
            int actualDamageOfFirstFighter = random.Next(FirstFighter.Damage - damageGap, damageGap + FirstFighter.Damage);

            FirstFighter.TakeDamage(actualDamageOfSecondFighter);
            Console.WriteLine($"{SecondFighter.Name} нанёс {actualDamageOfSecondFighter} урона {FirstFighter.Name}!");
            SecondFighter.TakeDamage(actualDamageOfFirstFighter);
            Console.WriteLine($"{FirstFighter.Name} нанёс {actualDamageOfFirstFighter} урона {SecondFighter.Name}!");
        }
        public void ChooseFighters()
        {
            AddFighters();
            int fightersToChoose = 2;

            for (int fightersCount = 0; fightersCount < fightersToChoose; fightersCount++)
            {
                Console.Clear();
                PrintFighters();
                Console.WriteLine("Введите номер выбранного вами персонажа: ");
                string userInput = Console.ReadLine();

                if (Int32.TryParse(userInput, out int result) && result > 0 && result <= _fighters.Count)
                {
                    int fighterIndex = result - 1;

                    switch (userInput)
                    {
                        case "1":
                            PickChosenFighter(fighterIndex, fightersCount);
                            break;
                        case "2":
                            PickChosenFighter(fighterIndex, fightersCount);
                            break;
                        case "3":
                            PickChosenFighter(fighterIndex, fightersCount);
                            break;
                        case "4":
                            PickChosenFighter(fighterIndex, fightersCount);
                            break;
                        case "5":
                            PickChosenFighter(fighterIndex, fightersCount);
                            break;
                    }
                }
                else
                {
                    Console.WriteLine("Неправильный ввод данных...");
                    Console.ReadKey();
                }
            }
        }
        public void PickChosenFighter(int fighterIndex, int fightersCount)
        {
            if (fightersCount == 0)
            {
                FirstFighter = _fighters[fighterIndex];
                _fighters.RemoveAt(fighterIndex);

            }
            else
            {
                SecondFighter = _fighters[fighterIndex];
                _fighters.RemoveAt(fighterIndex);
            }
        }
        public void AddFighters()
        {
            _fighters.Add(new Barbarian(100, 20, "Варвар", 10, 1.5f));
            _fighters.Add(new Paladin(100, 15, "Паладин", 10));
            _fighters.Add(new Cleric(100, 12, "Жрец", 10, 15));
            _fighters.Add(new Mage(100, 15, "Маг", 5, 100));
            _fighters.Add(new Tank(100, 10, "Танк", 30));
        }
        public void PrintFighters()
        {
            for (int i = 0; i < _fighters.Count; i++)
            {
                Console.WriteLine(i+1 + ") - " + _fighters[i].Name);
            }
        }
    }
    abstract class Fighter
    {
        protected int Health;
        public int Damage { get; protected set; }
        public string Name { get; protected set; }
        protected int Armor;
        public bool IsAlive { get; protected set; }

        public Fighter(int health, int damage, string name, int armor, bool isAlive = true)
        {
            Health = health;
            Damage = damage;
            Name = name;
            Armor = armor;
            IsAlive = isAlive;
        }
        public void TakeDamage(int damage)
        {
            Health -= damage - Armor;

            if (Health <= 0)
            {
                IsAlive = false;
            }
        }
    }
    class Barbarian : Fighter
    {
        private float _damageModificator;

        public Barbarian(int health, int damage, string name, int armor, float damageModificator) : base(health, damage, name, armor)
        {
            _damageModificator = damageModificator;
        }
        public void Rage()
        {
            Damage = (int)(Damage * _damageModificator);
        }
    }
    class Paladin : Fighter
    {
        private bool _statusDivineShield;

        public Paladin(int health, int damage, string name, int armor, bool statusDivineShield = false) : base(health, damage, name, armor)
        {
            _statusDivineShield = statusDivineShield;
        }
        public void CastDivineShield()
        {
            _statusDivineShield = true;
        }
        new public void TakeDamage(int damage)
        {
            int damageThroughDivineShield = 1;

            if (_statusDivineShield)
            {
                Health -= damageThroughDivineShield;
                _statusDivineShield = false;
            }
            else
            {
                Health -= damage - Armor;
            }
            if (Health <= 0)
            {
                IsAlive = false;
            }
        }
    }
    class Cleric : Fighter
    {
        private int _healPower;

        public Cleric(int health, int damage, string name, int armor, int healPower) : base(health, damage, name, armor)
        {
            _healPower = healPower;
        }
        public void CastHeal()
        {
            int maxHP = 100;

            if (Health + _healPower > maxHP)
            {
                Health = maxHP;
            }
            else
            {
                Health += _healPower;
            }
        }
    }
    class Mage : Fighter
    {
        private int _mana;

        public Mage(int health, int damage, string name, int armor, int mana) : base(health, damage, name, armor)
        {
            _mana = mana;
        }
        public void CastFireBall(Fighter aim)
        {
            int CostOfFireBall = 20;
            int fireDamage = 20;

            if (_mana >= CostOfFireBall)
            {
                _mana -= CostOfFireBall;
                aim.TakeDamage(Damage + fireDamage);
            }
        }
    }
    class Tank : Fighter
    {
        public Tank(int health, int damage, string name, int armor) : base(health, damage, name, armor){}
        public void DoubleShields()
        {
            Armor += Armor;
        }
    }
}
